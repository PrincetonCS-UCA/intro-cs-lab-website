<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gdb on Intro COS Lab</title><link>https://introlab.cs.princeton.edu/blog/gdb/</link><description>Recent content in gdb on Intro COS Lab</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Copyright © 2022, Department of Computer Science, Princeton University.</copyright><lastBuildDate>Wed, 01 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://introlab.cs.princeton.edu/blog/gdb/index.xml" rel="self" type="application/rss+xml"/><item><title>Guide and Best Practices for GDB</title><link>https://introlab.cs.princeton.edu/guide-and-best-practices-for-gdb/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://introlab.cs.princeton.edu/guide-and-best-practices-for-gdb/</guid><description>Note: This is not meant to be a comprehensive tutorial on how to use gdb, but rather a refresher on what you might encounter while helping 217 students debug and common commands you might have to use.
Part 1: How do I run gdb? Step 1: Make sure you build your program with -g. Example: $ gcc217 -g test.c definitions.c -o testprgm
Step 2: Run gdb within emacs. Launch emacs: $ emacs Call gdb with these keystrokes: x gdb The editor should display a message like this: Run gud-gdb (like this): gdb —fullname followed by the name of an executable.</description></item></channel></rss>